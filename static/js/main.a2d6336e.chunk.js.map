{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","Fragment","src","CardList","robots","map","user","i","Scroll","props","console","log","style","overflowY","height","children","App","searchValue","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCPSC,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,UACf,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,eAC9EC,SAAUJ,MCUHK,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,kBAAC,IAAMC,SAAP,KAEJ,yBAAKR,UAAU,uDACX,yBAAKS,IAAG,+BAA0BJ,EAA1B,cACR,6BACI,4BAAKC,GACL,2BAAIC,OCMDG,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACA,oCAEIA,EAAOC,KAAI,SAACC,EAAMC,GAAO,OACrB,kBAAC,EAAD,CAAMT,GAAIM,EAAOG,GAAGT,GAAIE,MAAOI,EAAOG,GAAGP,MAAOD,KAAMK,EAAOG,GAAGR,YCG7DS,EAXA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAER,oCACA,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrCL,EAAMM,YCgCJC,E,kDAjCX,aAAe,IAAD,8BACV,gBAWJC,YAAc,SAACC,GACX,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAXzC,EAAKC,MAAQ,CACTnB,OAAQ,GACRgB,YAAa,IAJP,E,gEAOO,IAAD,OAChBI,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACf,OAAQwB,S,+BAKlC,IAAD,EACyBC,KAAKN,MAA5BnB,EADF,EACEA,OAAQgB,EADV,EACUA,YACTU,EAAiB1B,EAAO2B,QAAO,SAACC,GAClC,OAAQA,EAAMjC,KAAKkC,cAAcC,SAASd,EAAYa,kBAE1D,OAAQ7B,EAAO+B,OACX,yBAAK1C,UAAU,MACX,4CACA,kBAAC,EAAD,CAAWD,aAAcqC,KAAKZ,cAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUb,OAAQ0B,MALP,+C,GArBbM,aCElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.a2d6336e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className=\"tc pa2\">\r\n        <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robot\"\r\n        onChange={searchChange}></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return(\r\n        <React.Fragment>\r\n        \r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2\">\r\n        <img src={`https://robohash.org/${id}?200x200`}></img>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n    </React.Fragment>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport robots from '../constants/Robots';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n    <>\r\n    {\r\n        robots.map((user, i) => {return(\r\n            <Card id={robots[i].id} email={robots[i].email} name={robots[i].name}/>\r\n        );})\r\n    }\r\n    </>\r\n    );\r\n};\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <>\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n        </>\r\n    );\r\n    \r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n            return response.json();\r\n        }).then(users => this.setState({robots: users}))\r\n    };\r\n    searchValue = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n    render() {\r\n        const {robots, searchField} = this.state;\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return (robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n        });\r\n        return !robots.length? <h1>Loading ...</h1> : (\r\n            <div className=\"tc\">\r\n                <h1>Robo Friends</h1>\r\n                <SearchBox searchChange={this.searchValue}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}